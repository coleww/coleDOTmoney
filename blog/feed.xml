<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cole Willsea</title>
  <subtitle>Cole Codes Cool Code</subtitle>
  <id>http://colewillsea.com/</id>
  <link href="http://colewillsea.com/"/>
  <link href="http://colewillsea.com/feed.xml" rel="self"/>
  <updated>2015-10-04T09:53:00-07:00</updated>
  <author>
    <name>Cole Willsea</name>
  </author>
  <entry>
    <title>npm install regex</title>
    <link rel="alternate" href="http://colewillsea.com/blog/npm-install-regex.html"/>
    <id>http://colewillsea.com/blog/npm-install-regex.html</id>
    <published>2015-10-04T09:53:00-07:00</published>
    <updated>2015-10-04T10:06:24-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;npm install regex&lt;/h1&gt;

&lt;h2&gt;Never Write Another Dang Regex Again!&lt;/h2&gt;

&lt;p&gt;Hello reader! At some point in your illustrious and storied programming career you probably read the following quote, and I bet you laughed about it, but also thought back to a time when it was really true for you:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Some people, when confronted with a problem, think &amp;quot;I know, I&amp;#39;ll use regular expressions.&amp;quot; Now they have two problems.&lt;/code&gt; - Jamie Zawinski&lt;/p&gt;

&lt;p&gt;Never have this problem again.&lt;/p&gt;

&lt;p&gt;As you might already know, I&amp;rsquo;m a pretty big fan of npm. They are literally the only tech company and/or technology that I will ever evangelize to anyone for any reason. &lt;/p&gt;

&lt;p&gt;npm has like, hella packages. I would look up the number, but humans are bad at understanding scale and magnititude, so suffice it to say that it is a hella lot of packages. &lt;/p&gt;

&lt;p&gt;It has recently occurred to me that buried somehwere in the npm registry is a regex for any problem that you might ever have (or, at the very least, some source code or a helper library to get you started). &lt;/p&gt;

&lt;h3&gt;THIS MEANS YOU NEVER HAVE TO WRITE A REGEX AGAIN!&lt;/h3&gt;

&lt;h5&gt;PARTY TIME!&lt;/h5&gt;

&lt;p&gt;You can browse the full list of regex and regex-related packages on this lovely &lt;a href="https://www.npmjs.com/search?q=regex"&gt;npm search&lt;/a&gt; which as of this writing has 2190 results. It includes lovely regexes for such things as &lt;a href="https://www.npmjs.com/package/regex-email"&gt;emails&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/regex-url"&gt;urls&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/phone-regex"&gt;phone numbers&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/copyright-regex"&gt;copyright notices&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/mac-regex"&gt;MAC addresses&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/script-regex"&gt;script tags&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/emoji-regex"&gt;emoji&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/rgb-regex"&gt;RGB color codes&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/regex-classname"&gt;CSS classnames&lt;/a&gt;, and  &lt;a href="https://www.npmjs.com/package/regex-regex"&gt;regexes themselves&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perhaps the next time you are confronted with a problem, you will think to yourself &amp;ldquo;I know, I&amp;rsquo;ll search npm!&amp;rdquo;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Drawing Art To The Canvas With Node</title>
    <link rel="alternate" href="http://colewillsea.com/blog/drawing-art-to-the-canvas-in-node.html"/>
    <id>http://colewillsea.com/blog/drawing-art-to-the-canvas-in-node.html</id>
    <published>2015-09-25T07:09:00-07:00</published>
    <updated>2015-09-25T08:31:33-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Drawing Art To The Canvas With Node&lt;/h1&gt;

&lt;h2&gt;Build Your Own Photoshop! Cuz That&amp;rsquo;s Something You Want To Do I Bet!&lt;/h2&gt;

&lt;p&gt;&lt;img alt="may 1968, paris" src="/blog/images/68-8ce01bd0.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Situationist_International"&gt;The Situationists&lt;/a&gt; were a group of French radicals who almost overthrew their government through non-violent means in 1968. Pretty cool. One tactic they emphasized is called &lt;a href="https://en.wikipedia.org/wiki/D%C3%A9tournement"&gt;Détournement&lt;/a&gt; which essentially entails &amp;ldquo;turning expressions of the capitalist system and its media culture against itself&amp;rdquo;. The Situationists would &lt;a href="http://physicalimpossibility.com/2011/05/22/movie-rip-offs-a-users-guide-detournement-and-dub-parodies/"&gt;re-dub old movies&lt;/a&gt; with their own theories in place of the dialogue, or put &lt;a href="http://bopsecrets.org/comics/dagwood.htm"&gt;revolutionary slogans&lt;/a&gt; over the text in comic books. If you are interested in the history and nuances of this technique, may I recommend &lt;a href="http://www.bopsecrets.org/SI/detourn.htm"&gt;A User’s Guide to Détournement&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;While the Situationists had to &lt;a href="https://en.wikipedia.org/wiki/Cut-up_technique"&gt;manually cut up their texts&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/The_Clock_(2010_film)"&gt;tediouslyedit their films&lt;/a&gt; we can abstract away a lot of this work with a few lines of JavaScript. With a handful of node modules we can write scripts that will recombine images into new forms, perhaps adding some procedurally generated text along the way as well, and then post the result to twitter or tumblr or whatever is popular these days. Because all algorithms are political, we can guide our work to try to make a potent statement or perhaps just a funny joke about something (though always be sure to punch up and not down). Some fantastic Twitter innovations in this area include &lt;a href="https://twitter.com/AU_Prompts"&gt;Alt Universe Prompts&lt;/a&gt; and &lt;a href="Men Doing Things"&gt;https://twitter.com/MenDoing&lt;/a&gt; by &lt;a href="https://twitter.com/tinysubversions"&gt;Darius Kazemi&lt;/a&gt;, &lt;a href="https://twitter.com/think_i_do"&gt;Think I Do&lt;/a&gt; and &lt;a href="https://twitter.com/desires_exe"&gt;UnconventionalDesire&lt;/a&gt; by &lt;a href="https://twitter.com/ckolderup"&gt;Casey Kolderup&lt;/a&gt;, &lt;a href="https://twitter.com/penguinandhouse"&gt;Penguin and House&lt;/a&gt; and &lt;a href="Eventually Bot"&gt;https://twitter.com/eventuallybot&lt;/a&gt; by &lt;a href="https://twitter.com/aparrish"&gt;Allison Parrish&lt;/a&gt;, as well as &lt;a href="https://twitter.com/_WE_GET_IT_BRO_"&gt;smoke weed&lt;/a&gt; and &lt;a href="https://twitter.com/SmashDabberBros"&gt;Super Smash Dabbers&lt;/a&gt; by myself. &lt;/p&gt;

&lt;p&gt;&lt;img alt="my mind has been replaced by moving images" src="/blog/images/mind-676ae231.gif" /&gt;&lt;/p&gt;

&lt;p&gt;In order to draw images to the canvas we will using the &lt;a href="https://www.npmjs.com/package/canvas"&gt;node canvas module&lt;/a&gt;. This module depends on &lt;a href="https://github.com/Automattic/node-canvas/wiki/_pages"&gt;cairo&lt;/a&gt; for which the installation might vary depending on your system. &lt;/p&gt;

&lt;p&gt;The question of how and where to get your source images from is a pretty good question. I&amp;rsquo;d give it 7/10 points, definitely could be better but it shows improvement from last time. &lt;a href="https://www.flickr.com/services/api/"&gt;The Flickr API&lt;/a&gt; has I think been historically the place to go to get random appropriately-licensed images. I recorded &lt;a href="https://vimeo.com/139794441"&gt;a screencast&lt;/a&gt; in which I made a bot that recklessly used a &lt;a href="https://www.npmjs.com/package/fetch-image"&gt;google image search node module&lt;/a&gt; and &lt;a href="https://github.com/dariusk/corpora"&gt;corpora data&lt;/a&gt;  to grab random interesting images. Apparently &lt;a href="https://api.imgur.com/"&gt;imgur&lt;/a&gt; and &lt;a href="https://api.giphy.com/"&gt;giphy&lt;/a&gt; both have APIs but I do not have opinions about either one.&lt;/p&gt;

&lt;h3&gt;WHATEVER STOP TALKING ABOUT FRENCH PHILOSOPHY AND TWITTER BOTS JUST SHOW ME THE CODE&lt;/h3&gt;

&lt;h5&gt;fine&amp;hellip;&lt;/h5&gt;

&lt;p&gt;What follows is basically the code that powers &lt;a href="https://twitter.com/the_______bird_"&gt;The Bird&lt;/a&gt;, which is a pseudo-bot that auto-magically layers my middle finger on top of images of corporate headquarters. I made this because I wanted to try to flip off every startup in San Francisco, but they kept getting acquired or shutting down before I could get to their offices, so I needed a faster way to express my distaste for capitalism.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// pronounced fuss
var fs = require('fs')
// hope u `npm install --save canvas` already!
var Canvas = require('canvas')
var Image = Canvas.Image

// A simple helper function to load image data from the file system. i'm not gonna annotate this function because it's boring. 
// Suffice to say that it turns data into pixels and other than that just accept it ok, gosh.
function loadFile(path, cb){
  fs.readFile(path, function(err, data){
    if (err) throw err
    img = new Image
    img.onload = function() {
      cb(img)
    }
    img.src = data
  })
}

// use our helper function to load the middle finger image, yeah.
loadFile('./the_bird.png', function(img){
  // get the size of the image. i suppose i could hardcode this, it'll never change. oh well. lazy.
  var width = img.width
  var height = img.height

  // make a new canvas that is the same size as the middle finger image, because we wouldn't want to let that get distorted or lose any fidelity
  canvas = new Canvas(width, height)

  // get that context
  ctx = canvas.getContext('2d')

  // load a corporation image
  loadFile('./a_corporation.png', function(toFlip){

    // draw the corporation to the context, scaling it to the size of the canvas. 
    // The other 4 arguments are the x,y coordinates for the top-left and bottom-right corners of the image.
    ctx.drawImage(toFlip, 0, 0, width, height)

    // draw the middle finger on top of the corporation. 
    // If, for example, you wanted to draw it only on the right half of the canvas you would instead pass `(img, width/2, height/2, width, height)`
    ctx.drawImage(img, 0, 0, width, height)

    // write the image to the file system
    fs.writeFileSync('current.png', canvas.toBuffer())
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interacting with the node canvas is exactly the same as the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;HTML5 Canvas&lt;/a&gt;, so any tutorials for that will basically work the same here. The only differences are in loading and saving images because in the browser you use AJAX and in node you use &lt;code&gt;fs&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now that you know how to edit images in node, go forth and build a bot that critiques capitalism through clever pop cultural tropes! &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>After A Lot Of Thought, I Have Decided To Shut Down My VC Backed Bong</title>
    <link rel="alternate" href="http://colewillsea.com/blog/after-a-lot-of-thought-i-have-decided-to-shutdown-my-bong.html"/>
    <id>http://colewillsea.com/blog/after-a-lot-of-thought-i-have-decided-to-shutdown-my-bong.html</id>
    <published>2015-09-23T05:44:00-07:00</published>
    <updated>2015-09-23T05:55:18-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;After A Lot Of Thought, I Have Decided To Shut Down My VC Backed Bong&lt;/h1&gt;

&lt;h2&gt;From Seed Round to Seeds and Stems&lt;/h2&gt;

&lt;p&gt;After a lot of thought and consultation with our board, I’ve decided to shut down my bong.&lt;/p&gt;

&lt;p&gt;This has been the hardest decision of my life and one that saddens me deeply. Unfortunately, my bong does not represent the vision I had when starting the company, so I believe it’s the right decision for myself, our investors and our team.&lt;/p&gt;

&lt;p&gt;I’m extremely proud of our team, which has built a bong that was used by over 15 million people and pushed the boundaries of traditional water pipes. I believe in honest, open communication and creative expression, and marijuana is a great device to achieve it. But it’s also the ultimate double-edged sword, which must be wielded with great respect and care. I look forward to seeing what others in this space do over time.&lt;/p&gt;

&lt;p&gt;I will spend the next couple of weeks doing what I believe is right to wind down my bong gracefully. While a majority of the team has already moved on to other exciting opportunities, I will dedicate most of my time to helping the core team find their next roles. We curated one of the most amazingly talented teams I’ve ever had the privilege of working with and I am certain each of them will go on to do great work at the very lucky companies that are able to hire them.&lt;/p&gt;

&lt;p&gt;My bong, Inc. still has a significant amount of invested capital, but our investors funded the team and the product, and I believe the right thing to do is to return the money rather than attempt to pivot. Innovation requires failure, and I believe in failing fast in order to go on and make only new and different mistakes.&lt;/p&gt;

&lt;p&gt;Over time, I plan to publish postmortems so that others can learn from the unique mistakes and challenges we faced and the wisdom gained from such an incredible 16 months.&lt;/p&gt;

&lt;p&gt;Thank you to everyone who supported us over the past year. What an incredible journey.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Making an Image Bot on Twitter</title>
    <link rel="alternate" href="http://colewillsea.com/blog/making-an-twitter-image-bot.html"/>
    <id>http://colewillsea.com/blog/making-an-twitter-image-bot.html</id>
    <published>2015-09-22T07:30:00-07:00</published>
    <updated>2015-09-22T07:35:35-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Making an Image Bot on Twitter&lt;/h1&gt;

&lt;h2&gt;Because putting random text on dumb images has been working for the New Yorker for a preeeettty looong time&lt;/h2&gt;

&lt;p&gt;Recently I recorded a screencast in which I created an image bot on Twitter. The bot picks a random noun, searches for images matching &lt;code&gt;&amp;quot;green&amp;quot; + noun&lt;/code&gt;, picks one at random, and tweets it with the text &amp;ldquo;WE GET IT, YOU SMOKE WEED.&amp;rdquo;. Super simple, but often absurdly funny.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/139794441" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;&lt;a href="https://vimeo.com/139794441"&gt;building a twitter bot about weed&lt;/a&gt; from &lt;a href="https://vimeo.com/colewillsea"&gt;Cole Willsea&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;The source code is up &lt;a href="https://github.com/coleww/we-get-it-you-smoke-weed"&gt;on GitHub&lt;/a&gt; and there has been a bit of improvement to the code that is not in the video. The bot is running live at &lt;a href="https://twitter.com/_WE_GET_IT_BRO_"&gt;@&lt;em&gt;WE&lt;/em&gt;GET&lt;em&gt;IT&lt;/em&gt;BRO_&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class="twitter-timeline" href="https://twitter.com/_WE_GET_IT_BRO_" data-widget-id="646331147127951360"&gt;Tweets by @&lt;em&gt;WE&lt;/em&gt;GET&lt;em&gt;IT&lt;/em&gt;BRO_&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;#39;http&amp;#39;:&amp;#39;https&amp;#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;quot;://platform.twitter.com/widgets.js&amp;quot;;fjs.parentNode.insertBefore(js,fjs);}}(document,&amp;quot;script&amp;quot;,&amp;quot;twitter-wjs&amp;quot;);&lt;/script&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Publishing Web Audio Instruments to npm</title>
    <link rel="alternate" href="http://colewillsea.com/blog/publishing-synthesizers-to-npm.html"/>
    <id>http://colewillsea.com/blog/publishing-synthesizers-to-npm.html</id>
    <published>2015-09-16T08:18:00-07:00</published>
    <updated>2015-09-16T08:31:37-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Publishing Web Audio Instruments to npm&lt;/h1&gt;

&lt;h2&gt;npm install dubstep&lt;/h2&gt;

&lt;p&gt;The state of web audio in the browser is pretty chill these days, but using it is still very close to that audio metal. Web audio provides excellent core objects like oscillators and filters, but it is up to the user to wire them together. For complex synthesizers and effects this might involve dozens of audioNodes and many lines of code just to get that skrillex monster bass wobbles bumping out your webpage.&lt;/p&gt;

&lt;p&gt;We need a way to publish pre-assembled audio graphs with a consistent API so that our projects don&amp;rsquo;t get taken over by copy pasted audioNode boilerplate.&lt;/p&gt;

&lt;p&gt;This pre-built synth can be thought of just like any other audioNode. It will have &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; functions, a &lt;code&gt;connect&lt;/code&gt; function to send it to the speakers or other nodes. But instead of having audioParams, it will have a &lt;code&gt;keys&lt;/code&gt; function that returns the names of all the audioNodes that make up the synth. You create such a synth by &lt;code&gt;require&lt;/code&gt;&amp;lsquo;ing the module and calling it, passing the audioContext as an argument.&lt;/p&gt;

&lt;p&gt;I have been using the following interface to achieve this dream:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;synth: {
  keys(),

  connect(destination),
  input(),

  start(time),
  stop(time),

  export(),
  import(data),

  audioNodes ...,
  fns? ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;keys()&lt;/code&gt; =&amp;gt; Returns an array of string keys to audioNodes, for example: &lt;code&gt;[&amp;quot;osc1&amp;quot;, &amp;quot;filter&amp;quot;, &amp;quot;distortion&amp;quot;, &amp;quot;gain&amp;quot;]&lt;/code&gt;. One could then do &lt;code&gt;synth[&amp;quot;osc1&amp;quot;].frequency.value = 10000&lt;/code&gt; or whatever you so desire. The naming of these keys is arbitrary but hopefully somehow indicates which type of audioNode they are.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;connect(destination)&lt;/code&gt; =&amp;gt; Connects the output nodes of the synth to a destination or other node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;input()&lt;/code&gt; =&amp;gt; For an effect or audio processor, this function returns the input node, for example &lt;code&gt;guitar.connect(dubstep.input())&lt;/code&gt;. Of course, you can connect the output of any audioNode to an audioParam on another audioNode like &lt;code&gt;guitar.connect(wobbler.lfo.frequency)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;start(time)&lt;/code&gt; =&amp;gt; Calls start(time) on all the source nodes. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stop(time)&lt;/code&gt; =&amp;gt; Calls stop(time) on all the source nodes. Shhhhhh.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;export()&lt;/code&gt; =&amp;gt; Returns JSON respresentation of the instrument. For easily saving settings between browser sessions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import(data)&lt;/code&gt; =&amp;gt; Loads JSON data, or use default values if no data is passed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;audioNodes ...&lt;/code&gt; =&amp;gt; Each node in the synth will be present as a property on the object, allowing for direct manipulation. Their keys can be found with &lt;code&gt;keys()&lt;/code&gt;. For example, drone-e-o-synth contains the keys &lt;code&gt;[&amp;#39;source&amp;#39;, &amp;#39;filter&amp;#39;, &amp;#39;lowFilter&amp;#39;, &amp;#39;distortion&amp;#39;, &amp;#39;volume&amp;#39;]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fns? ...&lt;/code&gt; =&amp;gt; Other arbitrarily named functions might or might not also be present on the object, such as for performing complex control changes that would be unwieldy to do directly, like setting oscillators to play chords, or turning on that dubstep wobble. Presumably the module author would tell you about this magic if it exists.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;To use one of these modules you would first &lt;code&gt;npm install&lt;/code&gt; it, probably with a &lt;code&gt;--save-dev&lt;/code&gt; as this is presumably a browserify project and because you want your dependencies to be well documented and to welcome collaboration. In your codes, you might do something like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  var makeSynth = require('the-name-of-a-synth-module')
  var context = new (window.AudioContext || window.webkitAudioContext)()
  var synth = makeSynth(context)
  synth.connect(context.destination)
  synth.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At which point a horrible noise would be wailing out of your speakers! A W E S O M E!!!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Thus far I have made 3 modules in this fashion, each of which includes some sort of strange demo app as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/drone-e-o-synth"&gt;drone-e-o-synth&lt;/a&gt; - a drone synth with a bunch of resonance filters and a demo that lets you control them by moving your laptop or phone around.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/tri-tri"&gt;tri-tri&lt;/a&gt; - a weird triangly synth with a fun and noisy video game about color to demonstrate what it sounds like&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/wobbler"&gt;wobbler&lt;/a&gt; - a simple dubstep wobble effect with a demo that lets you tap/click to change the wub wubs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My hope is that after making a handful or two of these synth modules, it will be possible to quickly &lt;code&gt;npm install&lt;/code&gt;, &lt;code&gt;require()&lt;/code&gt;, and &lt;code&gt;connect&lt;/code&gt; together some reallllllllllly out-there browser synths with &lt;a href="https://www.npmjs.com/package/web-audio-ui"&gt;web-audio-ui&lt;/a&gt;, &lt;a href="https://github.com/substack/browserify-handbook"&gt;Browserify&lt;/a&gt;, and a few lines of code. &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href="openmusic"&gt;https://github.com/openmusic&lt;/a&gt; also provides a collection of very useful audioNodes and web components. Most of my synths include at least one openmusic module, and I find the sample player and oscillator to be indispensable for doing audio work on the web. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Logging URLS from IRC to Delicious with Node</title>
    <link rel="alternate" href="http://colewillsea.com/blog/node-irc-url-logger.html"/>
    <id>http://colewillsea.com/blog/node-irc-url-logger.html</id>
    <published>2015-09-08T15:10:00-07:00</published>
    <updated>2015-09-08T15:27:08-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Logging URLS from IRC to Delicious with Node&lt;/h1&gt;

&lt;h2&gt;Oh you know just plugging some APIs together&lt;/h2&gt;

&lt;p&gt;Like most people, I participate in secret societies through hidden IRC channels. The conversations that take place in these circles are bound by blood, however as the US government has proven it is not actually &amp;ldquo;spying&amp;rdquo; if all you do is collect &amp;ldquo;metadata&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In this instance, the &amp;ldquo;metadata&amp;rdquo; I am after is any and all URLs that get posted in one of these esoteric chatrooms. Even if I can&amp;rsquo;t keep up on the day to day message logs, I can still peruse the links that others have shared. After all, that is why we are on the internet of course. To hyperlink.&lt;/p&gt;

&lt;p&gt;To that end I wrote a simple node.js bot that sits in some IRC channels, scans any messages it sees for URLs, and posts any that it finds to a Delicious account. &lt;/p&gt;

&lt;p&gt;The source code is as follows:&lt;/p&gt;

&lt;script src="https://gist.github.com/coleww/a9f82ba7f37504bae368.js"&gt;&lt;/script&gt;

&lt;p&gt;You could, for example, have it join every IRC channel about Ember and make a page that is all about what is going on in Ember. That might be cool.&lt;/p&gt;

&lt;p&gt;I picked Delicious because it was the first link I recognized when I searched for &amp;ldquo;bookmark site API&amp;rdquo;, you could in theory have this script post links anywhere you want. It must be noted that I am using &lt;code&gt;childProcess.exec&lt;/code&gt; here to call a CLI tool out of sheer laziness: I am sure there is a &lt;code&gt;require&lt;/code&gt;-able Delicious API wrapper module out there somewhere.&lt;/p&gt;

&lt;p&gt;While making this I was thinking about certain programming language channels where people will often ask for help with bugs. For example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; coledubs: what is up with this error "ILLEGAL: FOO"
&amp;gt; derbyshire: wow that sounded awful 
&amp;gt; elephant: coledubs - do a nom bom, that should fix it
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With a sufficient amount of regex&amp;#39;ing, one could parse the logs of these channels and create automatic Q&amp;amp;A pages. In the example above, it wouldn&amp;rsquo;t be difficult to detect that elephant is answering coledubs&amp;rsquo;s question, and by saving it somehwere this might help someone else down the line who sees an &lt;code&gt;ILLEGAL: FOO&lt;/code&gt; error.  &lt;/p&gt;
</content>
  </entry>
</feed>
