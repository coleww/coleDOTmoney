<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cole Willsea</title>
  <subtitle>Cole Codes Cool Code</subtitle>
  <id>http://colewillsea.com/</id>
  <link href="http://colewillsea.com/"/>
  <link href="http://colewillsea.com/feed.xml" rel="self"/>
  <updated>2015-08-08T09:48:00-07:00</updated>
  <author>
    <name>Cole Willsea</name>
  </author>
  <entry>
    <title>Eliminating The Ember-Rails Context Switch</title>
    <link rel="alternate" href="http://colewillsea.com/blog/context-switching-ember-rails.html"/>
    <id>http://colewillsea.com/blog/context-switching-ember-rails.html</id>
    <published>2015-08-08T09:48:00-07:00</published>
    <updated>2015-08-08T09:50:50-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Eliminating The Ember-Rails Context-Switch&lt;/h1&gt;

&lt;h2&gt;making your frameworks work for you&lt;/h2&gt;

&lt;p&gt;Ember and Rails make a great choice for a one-two slam-dunk of a front-and-back-end-framework combo. They both have powerful CLI tools, integrate seamlessly with each other, and come fresh-out-the-generator all-set-up to create RESTful JSON CRUD APIs (ooo la la) through Test-Driven-Development (oh my). &lt;/p&gt;

&lt;p&gt;Both frameworks emphasize convention over configuration which means less bikeshedding over how to organize files or names things or set up basic infrastructure. But you still retain the ability to enter that bikeshed and paint it whatever color the team decides on if that is the route you end up choosing to go down after a series of lengthy meanings. &lt;/p&gt;

&lt;p&gt;It also means that common solutions can be extracted and easily re-used on other projects because they all share a consistent architecture. If I solve a deployment issue in my Ember app then I can extract it into an add-on so other people can use my solution too, as is done in the Ember community. And if I solve some problem with my Rails app then I can release a gem that flagrantly monkey patches Ruby core, as is done in the Rails community.&lt;/p&gt;

&lt;p&gt;This architectural consistency also exists between Ember and Rails in the APIs of their CLI tool. Both frameworks emphasize using generator commands to ensure that files are named right and add boilerplate code. And luckily they both settled on the same word for this command:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ember generate controller dubsteps 
rails generate controller dubsteps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this can still get a bit confusing for those of us who spend all day hopping back and forth between Ember and Rails code bases. You might one day find yourself in this unenviable position:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ember g model foo
version: 0.2.3
You have to be inside an ember-cli project in order to use the generate command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OOPS you forgot where you were and what you were doing and tried to use &lt;code&gt;ember&lt;/code&gt; inside of a &lt;code&gt;rails&lt;/code&gt; project. You should consider yourself lucky that ember-cli catches this error for you. &lt;/p&gt;

&lt;p&gt;This kind of thing happens more than we might care to admit, and it is caused by a phenomenon known as context switching. We get our brain all set on doing one particular task in a given environment, and then when we go to accomplish a related-but-different task in a nearby environment we get all discombobulated. &lt;/p&gt;

&lt;p&gt;Technologists hate context switching because it means they have less time available in their life to ship product and engage with brands on twitter. That is why a lot of startups demand that their employees give up their personal lives and abandon their families to work 80 hour weeks: if there is no longer a division between work and life, then one no longer suffers from context switching between them!&lt;/p&gt;

&lt;p&gt;That kind of mentality is a bit too extreme and fascist for my tastes. Making it easier to jump between Rails and Ember projects is a much nicer goal to have than ruthlessly optimizing the extraction of surplus value from laborers.&lt;/p&gt;

&lt;p&gt;To that end, I have created a command line tool called geee (abbreviated to &lt;code&gt;g&lt;/code&gt; (but it is called geee because people have already pushed libraries called &lt;code&gt;g&lt;/code&gt; :/)). You see, both Ember and Rails already give you a MAJOR productivity boost by allowing you to substitute the word &lt;code&gt;generator&lt;/code&gt; for the letter &lt;code&gt;g&lt;/code&gt;, like so:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ember g controller dubsteps 
rails g controller dubsteps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I thought: &amp;ldquo;why not take this a step further and drop the CLI command entirely?&amp;rdquo;. That way we would just have to type:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;g controller dubsteps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the computer would figure out what kind of project folder we are inside of and do the right thing accordingly! Not only are you typing shorter commands, but you no longer have to switch contexts either!&lt;/p&gt;

&lt;h4&gt;LETS SEE A DEMO:&lt;/h4&gt;

&lt;p&gt;&lt;img alt="geee demo" src="/blog/images/g-demo-452dfa75.gif" /&gt;&lt;/p&gt;

&lt;p&gt;geee/g will run any generator that Rails or Ember supports, and could be easily be forked and extended to cover other frameworks (if such things exist). &lt;/p&gt;

&lt;p&gt;The best part about geee is that it comes packaged as either a &lt;a href="https://rubygems.org/gems/geee"&gt;Ruby gem&lt;/a&gt; or a &lt;a href="https://www.npmjs.com/package/geee"&gt;Node module&lt;/a&gt;, so that way you don&amp;rsquo;t even have to figure out the context of what package manager you are using! &lt;/p&gt;

&lt;p&gt;Just do this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install geee
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g geee
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;g&lt;/code&gt; will be made available on yr path!&lt;/p&gt;

&lt;p&gt;BUT NEVER BOTH, DO NOT INSTALL BOTH AT THE SAME TIME, BAD THINGS WILL HAPPEN, MIT LICENSE YO!!!!!!!!!!!!!! &amp;ldquo;IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&amp;rdquo;!!!!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Meta Test Driven Development</title>
    <link rel="alternate" href="http://colewillsea.com/blog/test-yr-test-suite.html"/>
    <id>http://colewillsea.com/blog/test-yr-test-suite.html</id>
    <published>2015-08-03T08:02:00-07:00</published>
    <updated>2015-08-03T08:30:45-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Meta Test Driven Development&lt;/h1&gt;

&lt;h2&gt;Making your test suite run another test suite&lt;/h2&gt;

&lt;p&gt;As a programmer, I find myself in a weird position of being both lazy and all about dat UNIX philosophy. My laziness makes me want to do as little work as possible, but my enthusiasm for UNIX makes me want to create as many small modules as possible. And what could be more boring than setting up boiler plate code for a new small module?&lt;/p&gt;

&lt;p&gt;The solution, of course, is to write a scaffolding generator(s)! That way the computer can create all the appropriately named folders and files that I will need for a project, and also do things like fill in sensible defaults for config files or even insert some dummy smokescreen code. &lt;/p&gt;

&lt;p&gt;The generator code will of course have a test suite: we create a new dummy app and then check that the files are all there and that they contain what we expect and then we rimraf it. But what about the dummy app? It too might have a smokescreen test suite, which we can use to demonstrate that everything is running correctly (or at least correctly enough to print &amp;ldquo;hello world&amp;rdquo;). &lt;/p&gt;

&lt;p&gt;&lt;img alt="glitchy test recursion" src="/blog/images/testrecurse-839ed3c0.png" /&gt;&lt;/p&gt;

&lt;h3&gt;RUBY&lt;/h3&gt;

&lt;p&gt;The first time I did this trick was in Ruby with Minitest. Here, it turned out to be easy as loading the test file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;load &amp;#39;./such_test_bot/test/such_test_bot_test.rb&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thats about all there is to see, but if you really want more sauce code here are the tests for my &lt;a href="https://github.com/coleww/twitter_bot_generator/tree/master/test"&gt;twitter bot generator&lt;/a&gt;. The rakefile simply loads all these files, which runs the tests for the generator as well as each different type of generated bot. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WOW THAT WAS SO EASY THAT I AM ALREADY BORED&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are correct, Ruby is like that. &lt;/p&gt;

&lt;h3&gt;NODE.JS&lt;/h3&gt;

&lt;p&gt;I recently tried to do this trick again in Node and wound up facing some strange issues. I thought I could take the easy route and just &lt;code&gt;require&lt;/code&gt; my test files, and after that failed I even put in some extra effort to test out something like &lt;code&gt;cd newDir &amp;amp;&amp;amp; npm test&lt;/code&gt;, but I instantly hit a wall that seemed to be surrounding a little bundle of hell that we all know as &lt;code&gt;/node_modules&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong, npm is A M A Z I N G, but when it comes to &amp;ldquo;how my JavaScript dependencies get from the internet to a compiled state in my project folder&amp;rdquo; I know absolutely nothing and prefer to keep it that way. The error I was facing seemed to be that when my project&amp;rsquo;s copies of tap/tape ran the test suite for the generated project, there was some sort of unfathomable versioning error that caused the function/constant &lt;code&gt;defined&lt;/code&gt; to be &lt;code&gt;undefined&lt;/code&gt;. O_o wow.&lt;/p&gt;

&lt;p&gt;To verify that this was in fact the culprit I made it so that the generated app did an &lt;code&gt;npm install&lt;/code&gt; before running the tests, and everything worked! But making my test suite hit the network and download packages would be a horrible, just awful thing. (fact: at my first job our test suite did this)&lt;/p&gt;

&lt;p&gt;Instead I took the middle-road-hack: I generated a new dummy app, &lt;code&gt;cd&lt;/code&gt;&amp;rsquo;d into the directory, and then manually &lt;code&gt;npm install --save-dev&lt;/code&gt;&amp;rsquo;d the bare minimum packages that it would take for it&amp;rsquo;s test suite to run/pass. I then took the &lt;code&gt;node_modules&lt;/code&gt; folder that was created and copied it over to my generator project as &lt;code&gt;test_modules&lt;/code&gt;. Now when I wanted to run a generated test suite I just had to copy that &lt;code&gt;test_modules&lt;/code&gt; folder over to the generated project as it&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; before running the tests:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'child_process'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;

&lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'does all the stuff'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// generate a generatedAppThing i guess?&lt;/span&gt;

  &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cp -r test_modules generatedAppThing/node_modules &amp;amp;&amp;amp; cd generatedAppThing &amp;amp;&amp;amp; node test.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'generated module also works'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that runs I just call a test assertion from the meta-test callback, and if that fails I know I broke something in the generated code. See more in &lt;a href="https://github.com/coleww/mkproj/blob/master/test.js"&gt;mkproj/test.js&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It is indeed unfortunate that I now have this &lt;code&gt;test_modules&lt;/code&gt; thing checked into my project, and even worse that those modules will be harder to update now, but I think this awkwardness is worth the assurance that my code is really really working.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;To take this one step further, for a particularly complicated generator app one might use a meta-TDD style. The test suite for the generator would simply create a new app and call it&amp;rsquo;s test suite. You would start out by writing the bare minimum of code to generate an app that has a failing test, then make that generated test pass, and continue in this fashion, forever and ever. For a larger project like Yeoman which abstracts project generation across multiple domains, one might even write a generator-generator which could be meta-meta-test-driven. Turtles, all the way.&lt;/p&gt;

&lt;p&gt;&lt;img alt="turtles" src="/blog/images/turts-1a4ec479.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;WOWWWW&lt;/h3&gt;
</content>
  </entry>
  <entry>
    <title>Node.js Poetic Modules</title>
    <link rel="alternate" href="http://colewillsea.com/blog/node-poetry-modules.html"/>
    <id>http://colewillsea.com/blog/node-poetry-modules.html</id>
    <published>2015-08-01T15:53:00-07:00</published>
    <updated>2015-08-02T08:43:19-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Node.js Poetic Modules&lt;/h1&gt;

&lt;h2&gt;Presenting A Voice Unto The Computer&lt;/h2&gt;

&lt;p&gt;&lt;img alt="deep dreamed surrealism" src="/blog/images/surreal-773fbf3d.png" /&gt;&lt;/p&gt;

&lt;p&gt;Node.js and npm provide a wonderfully vibrant and delightfully rich ecosystem for making browser-or-terminal-based works of art. Generally I start a project by searching around for existing modules that do what I need, or if there are none then I write the module that does what I need and publish it to npm (&lt;em&gt;nice&lt;/em&gt;). With browserify I can use the same code for a CLI tool as I do for a website. &lt;/p&gt;

&lt;p&gt;This makes it really easy to explore the full spectrum of possibilities for a given artistic concept or linguistic algorithm. For example, some modules work well in the browser where you can edit inputs and change paramaters on the fly, while others might be better utilised as part of a command line script. I have heard this style of development and deployment referred to as &amp;ldquo;isomorphic JavaScript&amp;rdquo;, but call it what you will I just think it&amp;rsquo;s darn nifty that this code will run on anything from a refrigerator to a jumbotron. &lt;/p&gt;

&lt;p&gt;While there are many Node.js modules available for interfacing with every IO stream that you could possibly connect to your computer, I would like to discuss some Node.js modules that I have published recently which operate purely on, by, for, and around text:&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/eat-wrapper"&gt;eat-wrapper&lt;/a&gt; is a set of helper functions for the Edinburgh Associative Thesauraus, which is kind of like a 70s British pseudo-word-net. One might iterate over a sentence and use it to get random words that are related to that sentence, and then find other sentences that include those related words, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/word-vomit"&gt;word-vomit&lt;/a&gt; accepts a string and randomly replaces certain words in that string with other words that are of the same part of speech. Nice for subtly changing the meaning of a passage through random juxtaposition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/n-plus-7"&gt;n-plus-7&lt;/a&gt; employs a technique of the &lt;a href="https://en.wikipedia.org/wiki/Oulipo"&gt;Oulipo&lt;/a&gt; whereby each noun in a string is replaced with the seventh noun after that noun in the dictionary. You can replace &amp;ldquo;noun&amp;rdquo; with any list or category of words, and you can also change the offset from seven to any positive or negative integer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/poetic-vomit"&gt;poetic-vomit&lt;/a&gt; is similar to word-vomit, but instead replaces words with a random rhyming word. This is quite useful for generating song lyrics or rhythmic poetry.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/is-snowball"&gt;is-snowball&lt;/a&gt; detects whether or not a given string is a &amp;ldquo;snowball&amp;rdquo;, that is, if each word in the string is 1 character longer than the previous one, i.e, &amp;ldquo;o my wow this snowy ballll&amp;rdquo;. The reverse case of descending length can also be detected. This might might be good to throw in the path of a web scraper or tweet stream or the entirety of Project Gutenberg.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/new-slang"&gt;new-slang&lt;/a&gt; accepts a map of string sequences to string replacements, and transforms strings of text by replacing those string sequences with the, err, uh, replacements. For example, given a map of &lt;code&gt;{ou: &amp;#39;ooo&amp;#39;}&lt;/code&gt; and a string like &lt;code&gt;&amp;#39;you dawg&amp;#39;&lt;/code&gt;, this module would return &lt;code&gt;&amp;#39;yooo dawg&amp;#39;&lt;/code&gt;. If the function was called over and over with a map like &lt;code&gt;{ou: ooui}&lt;/code&gt; and the output of the previous transformation it might produce something similar to &lt;a href="https://github.com/aparrish/linear-lsystem-poetry"&gt;Allison Parrish&lt;/a&gt;&amp;rsquo;s l-system poem generator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/lipogram"&gt;lipogram&lt;/a&gt; demonstrates another constraint of the Oulipo whereby a given text does not contain a letter or set of letters, for example &lt;a href="https://en.wikipedia.org/wiki/A_Void"&gt;A Void by Georges Perec&lt;/a&gt; which does not contain the letter e. One could, perhaps, draw deep meaning from a poem composed out of sentences from Ruby on Rails blog posts that do not contain the letters &lt;code&gt;[&amp;quot;C&amp;quot;, &amp;quot;O&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;P&amp;quot;, &amp;quot;U&amp;quot;, &amp;quot;T&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;R&amp;quot;]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/each-cons"&gt;each-cons&lt;/a&gt; does not do anything on it&amp;rsquo;s own&amp;hellip;it is just a helper function that exists in Ruby which I wanted to have available in Node.js without requiring all of underscore/lodash/whatever. This function returns consecutive sequences of an array, so given &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt; and a sequence length of &lt;code&gt;3&lt;/code&gt;, it would return &lt;code&gt;[[1, 2, 3], [2, 3, 4], [3, 4, 5]]&lt;/code&gt;. This is particularly handy for constructing &lt;a href="https://www.khanacademy.org/computing/computer-science/informationtheory/moderninfotheory/v/markov_chains"&gt;Markov chains&lt;/a&gt;, and, I am certain, other things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/diacriticize"&gt;diacriticize&lt;/a&gt; basically performs a light &lt;a href="http://www.eeemo.net/"&gt;zalgo&lt;/a&gt; maneuver on the text. It seems to be horridly broken on a lot of platforms, so user beware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/to-unicode"&gt;to-unicode&lt;/a&gt; transforms some text into unicode equivalents, so you can add circles around all yr letters or switch to a mono-spaced font. Like diacriticize, there are some issues sometimes.  &lt;code&gt;¯\_(ツ)_/¯ unicode  ¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;These modules don&amp;rsquo;t serve any &amp;ldquo;real&amp;rdquo; purpose, but they are fun to make and usually produce amusing output. Furthermore, in my day to day job I am usually almost always fixing minor bugs or building incremental features on user interfaces to RESTful CRUD APIs in a SAAS fashion, so it is nice to have an excuse to design, implement, benchmark, and optimize a real live algorithm. Art is a wonderful excuse to try out something new, whether it be an algorithm, framework, database, or language. I for one first became truly familiar with and enamored by mongoDB only through writing a video game inside of it.&lt;/p&gt;

&lt;p&gt;Moreover, all of these modules follow what I consider to be best practices for Node.js projects: uses the &lt;a href="https://github.com/feross/standard"&gt;standard&lt;/a&gt; JavaScript style/linter, has tests, has CI setup to run those tests, has documentation that includes a breakdown of the API for the module and some examples, has a small demo app built that demonstrates what the thing does, and, if it makes sense to, it includes a CLI script version of the module. &lt;/p&gt;

&lt;p&gt;Other reasons to use JavaScript to destroy language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dariusk/NaNoGenMo"&gt;NaNoGenMo&lt;/a&gt;: which, put simply, is an annual event wherein you &amp;ldquo;Spend the month of November writing code that generates a novel of 50k+ words.&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tinysubversions.com/2013/09/how-to-make-a-twitter-bot/"&gt;twitter bots&lt;/a&gt;: make a robot spew nonsense for the world to see! (many of the modules mentioned are being used to power the brain of &lt;a href="https://twitter.com/pataphysyllabus"&gt;Hank&lt;/a&gt; (also a lot of taylor swift))&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.somewhatabstract.com/2015/03/02/writing-a-simple-slack-bot-with-Node.js-slack-client/"&gt;slack bots&lt;/a&gt;: make a robot spew nonsense for your co-workers to see! &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tcf.ua.edu/Classes/Jbutler/T340/SurManifesto/ManifestoOfSurrealism.htm"&gt;Poetry&lt;/a&gt;: it is important.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;make a module&lt;/h3&gt;

&lt;p&gt;I have many friends and co-workers who agonize over finding a side project to hack on. They don&amp;rsquo;t want to build something that requires costly infrastructure or depends on network effects, but they also don&amp;rsquo;t want to build another TODO app or blogging client. By expanding your conception of the word &amp;ldquo;product&amp;rdquo; to include works of art and poetry, you&amp;rsquo;ll soon discover an endless supply of things to work on. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pitching Samples Around In Overtone</title>
    <link rel="alternate" href="http://colewillsea.com/blog/overtone-pitching-samples.html"/>
    <id>http://colewillsea.com/blog/overtone-pitching-samples.html</id>
    <published>2015-07-26T13:53:00-07:00</published>
    <updated>2015-08-02T08:16:03-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Pitching Samples Around In Overtone&lt;/h1&gt;

&lt;h2&gt;because sometimes, you&amp;rsquo;re too lazy to sample the entire piano&lt;/h2&gt;

&lt;p&gt;&lt;img alt="otone" src="/blog/images/otone-1e45a68a.gif" /&gt;&lt;/p&gt;

&lt;p&gt;For a while now I have been &lt;a href="http://shreddit-hard-co.re/"&gt;building interfaces&lt;/a&gt; for &lt;a href="http://coleww.github.io/problumz/"&gt;creating music&lt;/a&gt; with &lt;a href="https://www.npmjs.com/package/drone-e-o-synth"&gt;JavaScript and Web Audio&lt;/a&gt;, but apparently Overtone already does everything I could ever possibly think of or want. Awesome, my lifes work for nothing.&lt;/p&gt;

&lt;p&gt;One of the coolest things about Overtone is that it interfaces directly with &lt;a href="https://www.freesound.org/"&gt;Freesound&lt;/a&gt;, a database of free audio samples. That means that you can execute &lt;code&gt;(freesound 123456)&lt;/code&gt; and the audio file at ID 123456 will be automatically downloaded, stored in &lt;code&gt;.overtone/assets&lt;/code&gt;, and played back. I don&amp;rsquo;t know what sample 123456 is, so listener beware&amp;hellip; &lt;/p&gt;

&lt;p&gt;With this newly discovered power I began scouring the Freesound website for vocal samples to lay on top of my music. I found this sample pack called &lt;a href="https://www.freesound.org/people/beskhu/packs/4560/"&gt;Simplesong (MAC) pitched vocal formants&lt;/a&gt; and set out to convert it into a playable instrument along the lines of this &lt;a href="http://blog.josephwilk.net/clojure/creating-instruments-with-overtone.html"&gt;blog post by Joseph Wilk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that I had samples that I liked I just needed to grab their IDs from the website. The aformentioned Joseph Wilk post contains a Ruby script for grabbing ids for a pack, and I also wrote a &lt;a href="https://gist.github.com/coleww/939bc606645c57dd1b29"&gt;node script&lt;/a&gt; for grabbing IDs based on a query. &lt;/p&gt;

&lt;p&gt;Unfortunately, this pack only contained samples of the notes C# A# G and E at various octaves, but I could still play the intermediate pitches by altering the playback rate of the sample. If I wanted to play midi note 34 but I only had a sample for midi note 32 I would just convert both notes to frequencies, divide them, and use the result as the playback value: &lt;code&gt;((freesound 123456) :rate (/ (midi-&amp;gt;hz 34) (midi-&amp;gt;hz 32)))&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;With this simple piece of mathematics in hand, I just needed a play function to do all the equations and make some noise:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syllable-synth.synth&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;overtone.live&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;;; object of objects mapping syllable sound to midi note to a freesound sample
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="c1"&gt;;; there were many different syllable sounds represented, but for this example we can only make "oooo" sounds
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;:oooo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70529&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70528&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70527&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70526&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70525&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70524&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70523&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70522&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70521&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70520&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70519&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70518&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70517&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70516&lt;/span&gt;&lt;span class="p"&gt;)}})&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s"&gt;"accepts midi note and syllable to play, uses random if none passed"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;syll&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; if no syllable is passed, pick one at random
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;syllable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syll&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-nth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; grab the notes for which we have a sample 
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;;; that are lower than the note we want to play
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;syllable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; our base-note is the highest note in notes, 
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;;; or 31 if it is lower than 31
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;base-note&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; in order to pitch the base-note up to our desired note, 
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;;; we convert them both to frequencies and divide
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;midi-&amp;gt;hz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;midi-&amp;gt;hz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base-note&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c1"&gt;;; grab the sample for the given syllable and base-note,
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;;; and play it back with the rate set 
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;;; to pitch the sample up the desired note
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;syllable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base-note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:rate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;play&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the complete code &lt;a href="https://github.com/coleww/my-symphony/blob/master/src/my_symphony/silly-bills.clj"&gt;here&lt;/a&gt; or see it &lt;a href="https://github.com/coleww/my-symphony/blob/master/src/my_symphony/beat.clj"&gt;in action&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Setting up a simple CORS API in node</title>
    <link rel="alternate" href="http://colewillsea.com/blog/node-cors.html"/>
    <id>http://colewillsea.com/blog/node-cors.html</id>
    <published>2015-07-22T08:09:00-07:00</published>
    <updated>2015-08-02T08:33:59-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Setting up a simple CORS API in node&lt;/h1&gt;

&lt;h2&gt;TASTE THE ROCKIES&lt;/h2&gt;

&lt;p&gt;&lt;img alt="cors" src="/blog/images/cors-59d91492.png" /&gt;&lt;/p&gt;

&lt;p&gt;So you want to build a lil API. Maybe you have some live data to share with the world, maybe you want to make a &lt;a href="http://bikeshed.io/"&gt;funny joke&lt;/a&gt;, maybe I don&amp;rsquo;t really even care what your reasons are. If you would like lots of people to use your API, you should consider enabling CORS requests so that it can be easily accessed from client side javascript. If you don&amp;rsquo;t, then when people try to use jQuery to hit yr API they will get some horrible error and the whole system will crash. Or they&amp;rsquo;ll have to do some awkward proxying in order to get the data.   It&amp;rsquo;s bad. Trust me.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure there are all kinds of things pre-built for Express or Hapi and probably even just a plain ole&amp;rsquo; NPM module somewhere that does the CORS magic for you, but you know sometimes it&amp;rsquo;s nice to drop down a lil closer to that bare http server metal.&lt;/p&gt;

&lt;h3&gt;SHOW ME THE CODE!&lt;/h3&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"http"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Access-Control-Allow-Origin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Access-Control-Request-Method'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Access-Control-Allow-Methods'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'OPTIONS, GET'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Access-Control-Allow-Headers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'OPTIONS'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// do stuff&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are of course welcome to copy pasta that code snippet and be on your merry way, but I have taken the liberty of reading through some boring technical documents [&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS"&gt;1&lt;/a&gt;, &lt;a href="http://www.w3.org/TR/cors/#access-control-request-method-request-header"&gt;2&lt;/a&gt;] to try to figure out what the heck this all means:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;res.setHeader(&amp;#39;Access-Control-Allow-Origin&amp;#39;, &amp;#39;*&amp;#39;)&lt;/code&gt;
Here, Origin refers to the URL making the request. If you put &amp;ldquo;*&amp;rdquo; any url will work. If you put a space separated list of urls then only requests coming from those URLs will work, for example: &amp;ldquo;www.geocities.com www.example.com&amp;rdquo;. You can also put &amp;ldquo;null&amp;rdquo; which would mean nothing could access it but that makes no sense so probably just forget it is even an option.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;res.setHeader(&amp;#39;Access-Control-Request-Method&amp;#39;, &amp;#39;*&amp;#39;)&lt;/code&gt;
STRAIGHT FROM THE SPEC: &amp;ldquo;The Access-Control-Request-Method header indicates which method will be used in the actual request as part of the preflight request.&amp;rdquo; TBQH, I have no idea what this means. The star is probably fine. I don&amp;rsquo;t see how this is much different than the next entry:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;res.setHeader(&amp;#39;Access-Control-Allow-Methods&amp;#39;, &amp;#39;OPTIONS, GET&amp;#39;)&lt;/code&gt;
Here you list which HTTP request verbs are allowed. More on the OPTIONS request later. You could obviously add PUT or POST or PATCH or DELETE or actually I think that is it that is all that you can add to this comma separate list. The spec adds a note that &amp;ldquo;The &lt;code&gt;Allow&lt;/code&gt; header is not relevant for the purposes of the CORS protocol&amp;rdquo;, so take that as you will.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;res.setHeader(&amp;#39;Access-Control-Allow-Headers&amp;#39;, &amp;#39;*&amp;#39;)&lt;/code&gt;
Much like the All-Methods reqsponse header, here you specify which request header fields to allow. If yr API is super wicked and secret then maybe you should put some controls on it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Pre-Flight Request&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if ( req.method === 'OPTIONS' ) {
  res.writeHead(200)
  res.end()
  return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes, the CORS request needs to ask the API if it can CORS before it even attempts to CORS. That&amp;rsquo;s pretty weird stuff, but it&amp;rsquo;s also fairly typical as far as how the internets work. Just roll with it: if you get an OPTIONS request, 200 ok it immediately. The response will already contain all the CORS headers that you set, so that whatever is making the OPTIONS request knows what to do next.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;There you have it! Now your users can access your API using javascript in the browser OR the server, and you can finally build a hexamorphic web application!&lt;/p&gt;

&lt;p&gt;You can see the cors in use in &lt;a href="https://github.com/coleww/corpora-api"&gt;this project&lt;/a&gt;, which basically serves up a directory of JSON files as an API. (but is also sadly not currently deployed anywhere)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building a *nice* CLI For Your Sick npm Module</title>
    <link rel="alternate" href="http://colewillsea.com/blog/npm-cli.html"/>
    <id>http://colewillsea.com/blog/npm-cli.html</id>
    <published>2015-07-15T18:10:00-07:00</published>
    <updated>2015-08-02T08:33:12-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Building a &lt;em&gt;nice&lt;/em&gt; CLI For Your Sick npm Module&lt;/h1&gt;

&lt;h2&gt;A tale in backticks&lt;/h2&gt;

&lt;p&gt;Ok so you have written a pretty sweet node module. &lt;em&gt;nice&lt;/em&gt;. Ok so maybe you want to make this utility available on the command line?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;touch cmd.js&lt;/code&gt; =&amp;gt; lets make a file!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;chmod +x cmd.js&lt;/code&gt; =&amp;gt; lets make it executable!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;./cmd.js&lt;/code&gt; =&amp;gt; doesnt do anything yet!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But hey, it ran on the command line!&lt;/p&gt;

&lt;p&gt;THE END&lt;/p&gt;

&lt;p&gt;Ok so open up cmd.js in the text editor of yr choosing and add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;#!/usr/bin/env node&lt;/code&gt; =&amp;gt; This tells computer how to run this script&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;var yrModule = require(&amp;#39;./&amp;#39;)&lt;/code&gt; =&amp;gt; Load up that code&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But wait! What about arguments! I have a lot to say!&lt;/p&gt;

&lt;p&gt;shhhh go back to the command line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install yargs --save&lt;/code&gt; =&amp;gt; &lt;a href="https://www.npmjs.com/package/yargs"&gt;yargs&lt;/a&gt; is pretty cool. &lt;a href="https://www.npmjs.com/package/minimist"&gt;minimist&lt;/a&gt; is also pretty cool. I ended up using yargs due to reasons that I cannot recall. Cool story.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go back to the text editor and add:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'yargs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'h'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'help'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'help'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'what does thing do?'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'yrModule POTATOES!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'intensity'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'describe what the arguments do'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course&amp;hellip;you should probably edit things to suit yr module. You can chain multiple example/alias/describe calls if you want to show off more functionality or define other options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./cmd.js -h&lt;/code&gt; =&amp;gt; =&amp;gt; automatic documentation!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once defined, yargs literally does not care how things are passed to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;./cmd.js -i 72 what is up with airline food?&lt;/code&gt; =&amp;gt; ALL GOOD!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;./cmd.js what is up with airline food? --intensity=72&lt;/code&gt; =&amp;gt; TOTALLY COOL! SAME THING!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In either case, inside the running cmd.js script the following would be the truth:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;argv._&lt;/code&gt; =&amp;gt; =&amp;gt; [&amp;lsquo;what&amp;rsquo;, &amp;#39;is&amp;rsquo;, &amp;#39;up&amp;rsquo;, &amp;#39;with&amp;rsquo;, &amp;#39;airline&amp;rsquo;, &amp;#39;food?&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;argv.i&lt;/code&gt; =&amp;gt; =&amp;gt; 72&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your module is simple enough, you might be done! Back to the text editor!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;var output = yrModule(argv._.join(&amp;quot; &amp;quot;), argv.i)&lt;/code&gt; =&amp;gt; pass the arguments to yrModule (maybe it responds to jokes?)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.stdout.write(output)&lt;/code&gt; =&amp;gt; write the output to the terminal&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;process.exit()&lt;/code&gt; =&amp;gt; exit the program&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The UNIX ideology believes that building simple interfaces that accept text input and produce text output are super radical. We are fulfilling that dream right now. To the command line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;./cmd.js -i 12 awwwwoooooooooooooooooo | grep whales &amp;gt;&amp;gt; save_them.txt&lt;/code&gt; =&amp;gt; Amazing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, I don&amp;rsquo;t know if yr module has anything to do with whales, but it probably should.&lt;/p&gt;

&lt;p&gt;But hey! &lt;code&gt;grep&lt;/code&gt; =&amp;gt; accepts that weird &lt;code&gt;|&lt;/code&gt; =&amp;gt; pipe thing! Can we accept the weird pipe thing and thus complete our embodiment of the UNIX philosophy?&lt;/p&gt;

&lt;p&gt;Yes. Sure. Lets edit some text.&lt;/p&gt;

&lt;p&gt;First we wrap our original non-pipey code with an if block:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTTY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yrModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process.stdin.isTTY&lt;/code&gt; =&amp;gt; basically asks node &amp;ldquo;IS THIS A TERMINAL?&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then the else case, for pipey-times:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'utf8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;chunk&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'end'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yrModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat burrito_recipes.txt | ./cmd.js -i 400&lt;/code&gt; =&amp;gt; WOW all kinds of inputs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your module is super complex and might be used on datasets that can&amp;rsquo;t be stored in RAM then you should probably stream the chunks directly into your codes rather than building up a data string and doing it all at once. But this is fine, it&amp;rsquo;s fine, probably fine. Totally.&lt;/p&gt;

&lt;p&gt;Cool! Now your module is ready to do all sorts of command line tricks. The last thing you need to remember to do before publishing this update to npm is adding a &amp;ldquo;bin&amp;rdquo; entry to your package.json file so that yr CLI script is available in the PATH of those who install your module. (But if you forget sometimes don&amp;rsquo;t worry about dat inevitable post-npm-publish-version-bump-re-publish it happens to the best of us.)&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="s2"&gt;"bin"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"yrModule"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"cmd.js"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course replace yrModule with whatever you want the command line executable to be. In this instance you could do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yrModule foo fighters -i 65&lt;/code&gt; =&amp;gt; probably make sure you pick a name that isn&amp;rsquo;t already a thing, like &lt;code&gt;git&lt;/code&gt;, that would be bad. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ONE LAST THING!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process.exit(1)&lt;/code&gt; =&amp;gt; handle yr errors! If yr CLI script fails for some reason, exit with a 1 so that computer knows that a bad thing happened.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK ONE OTHER THING!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;preferGlobal&amp;quot;: true&lt;/code&gt; =&amp;gt; if your script is primarily a CLI tool and wouldn&amp;rsquo;t make much sense as a local project dependency, add this so users get a warning if they don&amp;rsquo;t &lt;code&gt;npm install -g&lt;/code&gt;. this would be for things like scaffolding tools or video games.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm publish&lt;/code&gt; =&amp;gt; YOU ARE A HERO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see this sort of thing in action in this &lt;a href="https://github.com/coleww/diacriticize/blob/gh-pages/cmd.js"&gt;cmd.js example code from one of my modules&lt;/a&gt; as well as this &lt;a href="https://github.com/coleww/mkproj/blob/master/cmd.js"&gt;wow, absolute bare minimum here, doesn&amp;rsquo;t even take arguments, barely trying, cool&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
