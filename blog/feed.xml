<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cole Willsea</title>
  <subtitle>Cole Codes Cool Code</subtitle>
  <id>http://colewillsea.com/</id>
  <link href="http://colewillsea.com/"/>
  <link href="http://colewillsea.com/feed.xml" rel="self"/>
  <updated>2015-08-20T15:09:00-07:00</updated>
  <author>
    <name>Cole Willsea</name>
  </author>
  <entry>
    <title>Throwing Good Errors With JavaScript</title>
    <link rel="alternate" href="http://colewillsea.com/blog/throwing-errs-js.html"/>
    <id>http://colewillsea.com/blog/throwing-errs-js.html</id>
    <published>2015-08-20T15:09:00-07:00</published>
    <updated>2015-08-20T15:09:42-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Throwing Good Errors With JavaScript&lt;/h1&gt;

&lt;h2&gt;Putting the &amp;ldquo;roar&amp;rdquo; in &amp;ldquo;erroars&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;As you may already know, error handling is very important in an asynchronous language such as JavaScript. You probably have callbacks nested inside of each other so intricately that it is impossible to know what is calling what, let alone where errors might emerge from, and the only way to get a handle on this mess is to make sure that all of your callbacks accept &lt;code&gt;err&lt;/code&gt; as their first argument. That way you are both reminded and forced to handle errors when they happen, rather than allowing them to bubble up towards the user in unexpected ways.&lt;/p&gt;

&lt;p&gt;Maybe you already have a handle on handling errors: you &lt;code&gt;console.log&lt;/code&gt; the unimportant ones, and halt the entire program on the really bad ones. But what do you do when you are writing code that needs to throw a special sort of error itself? JavaScript has some &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types"&gt;built-in error types&lt;/a&gt;, but like everything in JavaScript they are a little wonky. And maybe you need something a little bit more specialized, or want to include additional debugging information.&lt;/p&gt;

&lt;p&gt;For this task, we can wire up a simple custom error by hand! Lets see some stinking code:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// First we define a function. &lt;/span&gt;
&lt;span class="c1"&gt;// By convention, it should be capitalized-camel-case &lt;/span&gt;
&lt;span class="c1"&gt;// and end with the word "Error". &lt;/span&gt;
&lt;span class="c1"&gt;// This function can take arguments, &lt;/span&gt;
&lt;span class="c1"&gt;// or not, &lt;/span&gt;
&lt;span class="c1"&gt;// whatever you want, &lt;/span&gt;
&lt;span class="c1"&gt;// it's JavaScript after all!&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TheNameOfYourErrorGoesHereError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Give your error a name!&lt;/span&gt;
  &lt;span class="c1"&gt;// This should probably be the same as the name of the function,&lt;/span&gt;
  &lt;span class="c1"&gt;// It is what will show up when the error gets thrown.&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'TheNameOfYourErrorGoesHereError'&lt;/span&gt;

  &lt;span class="c1"&gt;// A helpful message about what went wrong!&lt;/span&gt;
  &lt;span class="c1"&gt;// You might want to include data from the arguments,&lt;/span&gt;
  &lt;span class="c1"&gt;// or explain how to fix things.&lt;/span&gt;
  &lt;span class="c1"&gt;// A link to a blog post/issue tracker/docs might also be nice!&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'My friend:\n  There seems to have been an issue with:\n  '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'\n  Please amend it at your earliest convenience.\nThank You.'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Next, we use prototypal inheritance to make our error function&lt;/span&gt;
&lt;span class="c1"&gt;// inherit from the plain ole vanilla Error object.&lt;/span&gt;
&lt;span class="c1"&gt;// This will give it all the properties of an Error,&lt;/span&gt;
&lt;span class="c1"&gt;// making it throwable and probably some other things.&lt;/span&gt;
&lt;span class="nx"&gt;TheNameOfYourErrorGoesHereError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Lastly, we set the constructor &lt;/span&gt;
&lt;span class="c1"&gt;// of the prototype &lt;/span&gt;
&lt;span class="c1"&gt;// of our custom error function &lt;/span&gt;
&lt;span class="c1"&gt;// (which is now a basic Error) &lt;/span&gt;
&lt;span class="c1"&gt;// to be our custom error function itself. &lt;/span&gt;
&lt;span class="nx"&gt;TheNameOfYourErrorGoesHereError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TheNameOfYourErrorGoesHereError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By setting the constructor of the prototype to be the custom error function, we make it so that calls to &lt;code&gt;new TheNameOfYourErrorGoesHereError(&amp;#39;problems!&amp;#39;)&lt;/code&gt; will call it to create the new &lt;code&gt;Error&lt;/code&gt; object, which is really just yr average object with name and message attributes and some other special functions, so our function satisfies the &lt;code&gt;Error&lt;/code&gt; interface because it has a name and a message and descends from &lt;code&gt;Error&lt;/code&gt;, which is of course itself an &lt;code&gt;Error&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;This makes JavaScript happy, so now when a problem comes up in our code we can deal with it like so:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ACatastrophicProblemHasArisenError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And everything will work magically because &lt;code&gt;throw&lt;/code&gt; expects to be passed an &lt;code&gt;Error&lt;/code&gt;, and our function satisfies these demands due to it&amp;rsquo;s prototypal ancestry. A W E S O M E !&lt;/p&gt;

&lt;h2&gt;BE KIND TO THE USER, THROW GOOD ERRORS!&lt;/h2&gt;

&lt;p&gt;&lt;a href="tron.jpg"&gt;tron: fight for the users&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Everything I Learned About TMUX In 3 Days</title>
    <link rel="alternate" href="http://colewillsea.com/blog/everything-tmux.html"/>
    <id>http://colewillsea.com/blog/everything-tmux.html</id>
    <published>2015-08-15T07:50:00-07:00</published>
    <updated>2015-08-15T08:12:32-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Everything I Learned About TMUX In Like 3 Days&lt;/h1&gt;

&lt;h2&gt;Seven Weird Tricks To Multiplex Your Terminals, Remotely!&lt;/h2&gt;

&lt;p&gt;Recently I started doing my work-&amp;ldquo;work&amp;rdquo; in a dev-box in the cloud. This meant getting adjusted to a whole new set of tooling because I couldn&amp;rsquo;t use my normal tricks like running six panes in one iTerm2 window. I wanted to treat the SSH connected box as though it was just another drive on machine, and &lt;em&gt;what I learned will shock you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll first need to create a &lt;code&gt;.tmux.conf&lt;/code&gt; file on your server if one has not already been provided for you. You can copy and paste &lt;a href="https://github.com/coleww/dotfiles/blob/master/.tmux.conf"&gt;my settings&lt;/a&gt; if you like, or read through and select only the parts you want. When you start TMUX, it will automagically look for and load this file.&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;A BRIEF INTRODUCTION TO TMUX NOTATION&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;C-a r&lt;/code&gt; =&amp;gt; &lt;code&gt;ctrl + a - r&lt;/code&gt; =&amp;gt; press ctrl and a together, then release, then press r&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;.tmux.conf&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;THE MOST IMPORTANT THING: &lt;code&gt;ctrl + b&lt;/code&gt; is a nightmare to press with human meat hands. Remap it to something more sensible like &lt;code&gt;ctrl + a&lt;/code&gt;. Or, you know, whatever you want. &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g prefix C-a
unbind C-b
bind C-a send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This lowers the escape time for entering TMUX commands, as the default speed seems to assume that you are going to pause for dramatic effect in the middle of typing. &lt;code&gt;xterm-keys&lt;/code&gt; makes it so TMUX doesn&amp;rsquo;t, like, totally freak out when it gets certain commands from iTerm.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -s escape-time 0
set -g xterm-keys on
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;THE MOUSE: you can still use it. This makes it so you can select windows and resize panes and probably do other cool things with your mouse, because why would you ever want to resize a window through keyboard shortcuts? &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You might be changing yr config file a lot while you try to get things juuuuuuuuuust right. A simple &lt;code&gt;ctrl + a - r&lt;/code&gt; will reload your configuration file on the spot. &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind r
bind r source-file ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Makes TMUX use GNU/EMACS commands for scrolling and other things. So one catch to doing work over SSH is that you inevitably must pick a side in the always riveting emacs vs. vim debate. If you are of the vim persuasion just don&amp;rsquo;t include this line because that is the default.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-window-option -g mode-keys emacs
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Move the status bar to the top. I guess if you prefer it at the bottom you can delete this. I will allow it. You might need to upgrade TMUX to at least 1.7 to get this working because apparently that is a VERY ADVANCED feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set-option -g status-position top
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Set the terminal to use 256 colorsa, and make the status bar and panes have prettier colors =^.^= customize to your joy! I guess that there are multiple acceptable colour formats? And that I copy-pasta&amp;rsquo;d these settings from different sources? &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g default-terminal "screen-256color"
set -g status-bg '#666666'
set -g status-fg '#aaaaaa'
set -g pane-border-fg colour245
set -g pane-active-border-fg colour46
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Remove a bunch of junk text from the status bar. I suppose that instead of the empty strings you could add something like &amp;ldquo;PIZZA TIME 4pm!!!&amp;rdquo; or what have you. Or maybe write a script that uses this space to give you updates on things like how all your tests failed or you got another email from jira.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set -g status-left ''
set -g status-right ''
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This lets you quickly jump around panes by entering &lt;code&gt;C-a the-number-of-the-pane&lt;/code&gt;. It also takes care to rebind C-l for reasons I don&amp;rsquo;t totally understand. I should see what happens when I delete that. Also renumbers the panes to be 1-9 instead of 0-9, because on yr keyboard the number keys probably go from 1-9, so it would be quite a stretch to hit the 0 key to go to the first pane, and then hit the 1 to go to the second. Array indexing doesn&amp;rsquo;t make sense for everything.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind ^A
bind ^A select-pane -t :.+
bind C-l send-keys 'C-l'
set -g base-index 1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This one is, I think, pretty explanatory.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind C-k clear-history
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;I tend to never split panes/windows in tmux, and instead just create new windows and tab between them with &lt;code&gt;C-a {1-9}&lt;/code&gt;. But when I do, I can never remember the command for it. So to make things easier this remaps those actions to use &lt;code&gt;|&lt;/code&gt; for a horizontal split and &lt;code&gt;-&lt;/code&gt; for vertical, which I must say is a cute little visual memnonic.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unbind %
bind | split-window -h
bind - split-window -v 
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3&gt;TMUX Commands&lt;/h3&gt;

&lt;p&gt;some of these are built in, some depend on using the above mentioned settings..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-a c&lt;/code&gt;    open a window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-a &amp;amp;&lt;/code&gt;    close a window&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-a d&lt;/code&gt;    detach from tmux&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-a k&lt;/code&gt;    clear history&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-a number&lt;/code&gt;    jump to that number window. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-a |&lt;/code&gt;    split window horizontally&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-a -&lt;/code&gt;    split window vertically&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;COPY PASTA&lt;/h3&gt;

&lt;p&gt;You might notice that TMUX is not happy about you trying to select and copy it&amp;rsquo;s output. Mouse-mode makes it so we can click the text, but in order to select text from TMUX and copy and paste elsewhere, &lt;strong&gt;just hold down the option key while you are selecting the text&lt;/strong&gt;. You&amp;rsquo;ll know it&amp;rsquo;s working because the selection will be a different color than the usual TMUX selection color. However if you are running split panes you will find that the selection does not obey their boundaries.&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;start a tmux session&lt;/h3&gt;

&lt;p&gt;First, SSH into your server.&lt;/p&gt;

&lt;p&gt;Then, run &lt;code&gt;tmux&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Hopefully it is installed already. &lt;/p&gt;

&lt;p&gt;I bet it might be.&lt;/p&gt;

&lt;p&gt;Now that you have this TMUX &amp;ldquo;session&amp;rdquo; running, you can &amp;ldquo;detach&amp;rdquo; from it and go do other things, then later come back and &amp;ldquo;re-attach&amp;rdquo; to it, and everything will still be as you left it! Processes will be processing, servers will be serving, text editors will be waiting for you to edit things.&lt;/p&gt;

&lt;p&gt;One neat trick I learned is to add a function like this to yr &lt;code&gt;.bash_profile&lt;/code&gt;for what have you:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sshin () {
  ssh $1 -t tmux a
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can do &lt;code&gt;sshin YRNAME@yr.host.server.com&lt;/code&gt; and you will automagically ssh in and attach to yr running TMUX session. When you are finished, you can enter &lt;code&gt;C-a d&lt;/code&gt; to detach and it will also disconnect you from the SSH connection. Note that you must already have a TMUX session running on the server for this command to work.&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;WOW! JUST LOOK AT THAT TERMINAL! WATCH HOW IT MULTIPLEXES!&lt;/h3&gt;

&lt;p&gt;&lt;img alt="tmuxing around" src="/blog/images/tmux-ea5f88b4.gif" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Eliminating The Ember-Rails Context Switch</title>
    <link rel="alternate" href="http://colewillsea.com/blog/context-switching-ember-rails.html"/>
    <id>http://colewillsea.com/blog/context-switching-ember-rails.html</id>
    <published>2015-08-08T09:48:00-07:00</published>
    <updated>2015-08-08T13:15:28-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Eliminating The Ember-Rails Context-Switch&lt;/h1&gt;

&lt;h2&gt;making your frameworks work for you&lt;/h2&gt;

&lt;p&gt;Ember and Rails make a great choice for a one-two slam-dunk of a front-and-back-end-framework combo. They both have powerful CLI tools, integrate seamlessly with each other, and come fresh-out-the-generator all-set-up to create RESTful JSON CRUD APIs (ooo la la) through Test-Driven-Development (oh my). &lt;/p&gt;

&lt;p&gt;Both frameworks emphasize convention over configuration which means less bikeshedding over how to organize files or names things or set up basic infrastructure. But you still retain the ability to enter that bikeshed and paint it whatever color the team decides on if that is the route you end up choosing to go down after a series of lengthy meanings. &lt;/p&gt;

&lt;p&gt;It also means that common solutions can be extracted and easily re-used on other projects because they all share a consistent architecture. If I solve a deployment issue in my Ember app then I can extract it into an add-on so other people can use my solution too, as is done in the Ember community. And if I solve some problem with my Rails app then I can release a gem that flagrantly monkey patches Ruby core, as is done in the Rails community.&lt;/p&gt;

&lt;p&gt;This architectural consistency also exists between Ember and Rails in the APIs of their CLI tool. Both frameworks recommend using generator commands to ensure that files are named right and add boilerplate code. And luckily they both settled on the same word for this command:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ember generate controller dubsteps 
rails generate controller dubsteps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this can still get a bit confusing for those of us who spend all day hopping back and forth between Ember and Rails code bases. You might one day find yourself in this unenviable position:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;ember g model foo
version: 0.2.3
You have to be inside an ember-cli project &lt;span class="k"&gt;in &lt;/span&gt;order to use the generate &lt;span class="nb"&gt;command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OOPS you forgot where you were and what you were doing and tried to use &lt;code&gt;ember&lt;/code&gt; inside of a &lt;code&gt;rails&lt;/code&gt; project. You should consider yourself lucky that ember-cli catches this error for you. &lt;/p&gt;

&lt;p&gt;This kind of thing happens more than we might care to admit, and it is caused by a phenomenon known as context switching. We get our brain all set on doing one particular task in a given environment, and then when we go to accomplish a related-but-different task in a nearby environment we get all discombobulated. &lt;/p&gt;

&lt;p&gt;Technologists hate context switching because it means they have less time available in their life to ship product and engage with brands on twitter. That is why a lot of startups demand that their employees give up their personal lives and abandon their families to work 80+ hour weeks: if there is no longer a division between work and life, then one no longer suffers from context switching between them!&lt;/p&gt;

&lt;p&gt;That kind of mentality is a bit too extreme and fascist for my tastes. Making it easier to jump between Rails and Ember projects is a much nicer goal to have than ruthlessly optimizing the extraction of surplus value from laborers.&lt;/p&gt;

&lt;p&gt;To that end, I have created a command line tool called geee (abbreviated to &lt;code&gt;g&lt;/code&gt; (but it is called geee because people have already pushed libraries called &lt;code&gt;g&lt;/code&gt; :/)). You see, both Ember and Rails already give you a MAJOR productivity boost by allowing you to substitute the word &lt;code&gt;generator&lt;/code&gt; for the letter &lt;code&gt;g&lt;/code&gt;, like so:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ember g controller dubsteps 
rails g controller dubsteps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I thought: &amp;ldquo;why not take this a step further and drop the CLI command entirely?&amp;rdquo;. That way we would just have to type:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;g controller dubsteps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the computer would figure out what kind of project folder we are inside of and do the right thing accordingly! Not only are you typing shorter commands, but you no longer have to switch contexts either!&lt;/p&gt;

&lt;h4&gt;LETS SEE A DEMO:&lt;/h4&gt;

&lt;p&gt;&lt;img alt="geee demo" src="/blog/images/g-demo-452dfa75.gif" /&gt;&lt;/p&gt;

&lt;p&gt;geee/g will run any generator that Rails or Ember supports, and could be easily be forked and extended to cover other frameworks (if such things exist). It is also an exemplary demonstration of the composability of simple command line tools in a UNIX fashion. &lt;/p&gt;

&lt;p&gt;The best part about geee is that it comes packaged as either a &lt;a href="https://rubygems.org/gems/geee"&gt;Ruby gem&lt;/a&gt; or a &lt;a href="https://www.npmjs.com/package/geee"&gt;Node module&lt;/a&gt;, so that way you don&amp;rsquo;t even have to figure out the context of what package manager you are using! &lt;/p&gt;

&lt;p&gt;Just do this:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gem install geee
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or this:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm install -g geee
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and &lt;code&gt;g&lt;/code&gt; will be made available on yr &lt;code&gt;path&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;BUT NEVER BOTH, DO NOT INSTALL BOTH AT THE SAME TIME, BAD THINGS WILL HAPPEN, MIT LICENSE YO!!!!!!!!!!!!!! &amp;ldquo;IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&amp;rdquo;!!!!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Meta Test Driven Development</title>
    <link rel="alternate" href="http://colewillsea.com/blog/test-yr-test-suite.html"/>
    <id>http://colewillsea.com/blog/test-yr-test-suite.html</id>
    <published>2015-08-03T08:02:00-07:00</published>
    <updated>2015-08-03T08:30:45-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Meta Test Driven Development&lt;/h1&gt;

&lt;h2&gt;Making your test suite run another test suite&lt;/h2&gt;

&lt;p&gt;As a programmer, I find myself in a weird position of being both lazy and all about dat UNIX philosophy. My laziness makes me want to do as little work as possible, but my enthusiasm for UNIX makes me want to create as many small modules as possible. And what could be more boring than setting up boiler plate code for a new small module?&lt;/p&gt;

&lt;p&gt;The solution, of course, is to write a scaffolding generator(s)! That way the computer can create all the appropriately named folders and files that I will need for a project, and also do things like fill in sensible defaults for config files or even insert some dummy smokescreen code. &lt;/p&gt;

&lt;p&gt;The generator code will of course have a test suite: we create a new dummy app and then check that the files are all there and that they contain what we expect and then we rimraf it. But what about the dummy app? It too might have a smokescreen test suite, which we can use to demonstrate that everything is running correctly (or at least correctly enough to print &amp;ldquo;hello world&amp;rdquo;). &lt;/p&gt;

&lt;p&gt;&lt;img alt="glitchy test recursion" src="/blog/images/testrecurse-839ed3c0.png" /&gt;&lt;/p&gt;

&lt;h3&gt;RUBY&lt;/h3&gt;

&lt;p&gt;The first time I did this trick was in Ruby with Minitest. Here, it turned out to be easy as loading the test file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;load &amp;#39;./such_test_bot/test/such_test_bot_test.rb&amp;#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thats about all there is to see, but if you really want more sauce code here are the tests for my &lt;a href="https://github.com/coleww/twitter_bot_generator/tree/master/test"&gt;twitter bot generator&lt;/a&gt;. The rakefile simply loads all these files, which runs the tests for the generator as well as each different type of generated bot. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WOW THAT WAS SO EASY THAT I AM ALREADY BORED&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You are correct, Ruby is like that. &lt;/p&gt;

&lt;h3&gt;NODE.JS&lt;/h3&gt;

&lt;p&gt;I recently tried to do this trick again in Node and wound up facing some strange issues. I thought I could take the easy route and just &lt;code&gt;require&lt;/code&gt; my test files, and after that failed I even put in some extra effort to test out something like &lt;code&gt;cd newDir &amp;amp;&amp;amp; npm test&lt;/code&gt;, but I instantly hit a wall that seemed to be surrounding a little bundle of hell that we all know as &lt;code&gt;/node_modules&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong, npm is A M A Z I N G, but when it comes to &amp;ldquo;how my JavaScript dependencies get from the internet to a compiled state in my project folder&amp;rdquo; I know absolutely nothing and prefer to keep it that way. The error I was facing seemed to be that when my project&amp;rsquo;s copies of tap/tape ran the test suite for the generated project, there was some sort of unfathomable versioning error that caused the function/constant &lt;code&gt;defined&lt;/code&gt; to be &lt;code&gt;undefined&lt;/code&gt;. O_o wow.&lt;/p&gt;

&lt;p&gt;To verify that this was in fact the culprit I made it so that the generated app did an &lt;code&gt;npm install&lt;/code&gt; before running the tests, and everything worked! But making my test suite hit the network and download packages would be a horrible, just awful thing. (fact: at my first job our test suite did this)&lt;/p&gt;

&lt;p&gt;Instead I took the middle-road-hack: I generated a new dummy app, &lt;code&gt;cd&lt;/code&gt;&amp;rsquo;d into the directory, and then manually &lt;code&gt;npm install --save-dev&lt;/code&gt;&amp;rsquo;d the bare minimum packages that it would take for it&amp;rsquo;s test suite to run/pass. I then took the &lt;code&gt;node_modules&lt;/code&gt; folder that was created and copied it over to my generator project as &lt;code&gt;test_modules&lt;/code&gt;. Now when I wanted to run a generated test suite I just had to copy that &lt;code&gt;test_modules&lt;/code&gt; folder over to the generated project as it&amp;rsquo;s &lt;code&gt;node_modules&lt;/code&gt; before running the tests:&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'child_process'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;

&lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'does all the stuff'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// generate a generatedAppThing i guess?&lt;/span&gt;

  &lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cp -r test_modules generatedAppThing/node_modules &amp;amp;&amp;amp; cd generatedAppThing &amp;amp;&amp;amp; node test.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'generated module also works'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that runs I just call a test assertion from the meta-test callback, and if that fails I know I broke something in the generated code. See more in &lt;a href="https://github.com/coleww/mkproj/blob/master/test.js"&gt;mkproj/test.js&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It is indeed unfortunate that I now have this &lt;code&gt;test_modules&lt;/code&gt; thing checked into my project, and even worse that those modules will be harder to update now, but I think this awkwardness is worth the assurance that my code is really really working.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;To take this one step further, for a particularly complicated generator app one might use a meta-TDD style. The test suite for the generator would simply create a new app and call it&amp;rsquo;s test suite. You would start out by writing the bare minimum of code to generate an app that has a failing test, then make that generated test pass, and continue in this fashion, forever and ever. For a larger project like Yeoman which abstracts project generation across multiple domains, one might even write a generator-generator which could be meta-meta-test-driven. Turtles, all the way.&lt;/p&gt;

&lt;p&gt;&lt;img alt="turtles" src="/blog/images/turts-1a4ec479.jpg" /&gt;&lt;/p&gt;

&lt;h3&gt;WOWWWW&lt;/h3&gt;
</content>
  </entry>
  <entry>
    <title>Node.js Poetic Modules</title>
    <link rel="alternate" href="http://colewillsea.com/blog/node-poetry-modules.html"/>
    <id>http://colewillsea.com/blog/node-poetry-modules.html</id>
    <published>2015-08-01T15:53:00-07:00</published>
    <updated>2015-08-02T08:43:19-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Node.js Poetic Modules&lt;/h1&gt;

&lt;h2&gt;Presenting A Voice Unto The Computer&lt;/h2&gt;

&lt;p&gt;&lt;img alt="deep dreamed surrealism" src="/blog/images/surreal-773fbf3d.png" /&gt;&lt;/p&gt;

&lt;p&gt;Node.js and npm provide a wonderfully vibrant and delightfully rich ecosystem for making browser-or-terminal-based works of art. Generally I start a project by searching around for existing modules that do what I need, or if there are none then I write the module that does what I need and publish it to npm (&lt;em&gt;nice&lt;/em&gt;). With browserify I can use the same code for a CLI tool as I do for a website. &lt;/p&gt;

&lt;p&gt;This makes it really easy to explore the full spectrum of possibilities for a given artistic concept or linguistic algorithm. For example, some modules work well in the browser where you can edit inputs and change paramaters on the fly, while others might be better utilised as part of a command line script. I have heard this style of development and deployment referred to as &amp;ldquo;isomorphic JavaScript&amp;rdquo;, but call it what you will I just think it&amp;rsquo;s darn nifty that this code will run on anything from a refrigerator to a jumbotron. &lt;/p&gt;

&lt;p&gt;While there are many Node.js modules available for interfacing with every IO stream that you could possibly connect to your computer, I would like to discuss some Node.js modules that I have published recently which operate purely on, by, for, and around text:&lt;/p&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/eat-wrapper"&gt;eat-wrapper&lt;/a&gt; is a set of helper functions for the Edinburgh Associative Thesauraus, which is kind of like a 70s British pseudo-word-net. One might iterate over a sentence and use it to get random words that are related to that sentence, and then find other sentences that include those related words, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/word-vomit"&gt;word-vomit&lt;/a&gt; accepts a string and randomly replaces certain words in that string with other words that are of the same part of speech. Nice for subtly changing the meaning of a passage through random juxtaposition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/n-plus-7"&gt;n-plus-7&lt;/a&gt; employs a technique of the &lt;a href="https://en.wikipedia.org/wiki/Oulipo"&gt;Oulipo&lt;/a&gt; whereby each noun in a string is replaced with the seventh noun after that noun in the dictionary. You can replace &amp;ldquo;noun&amp;rdquo; with any list or category of words, and you can also change the offset from seven to any positive or negative integer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/poetic-vomit"&gt;poetic-vomit&lt;/a&gt; is similar to word-vomit, but instead replaces words with a random rhyming word. This is quite useful for generating song lyrics or rhythmic poetry.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/is-snowball"&gt;is-snowball&lt;/a&gt; detects whether or not a given string is a &amp;ldquo;snowball&amp;rdquo;, that is, if each word in the string is 1 character longer than the previous one, i.e, &amp;ldquo;o my wow this snowy ballll&amp;rdquo;. The reverse case of descending length can also be detected. This might might be good to throw in the path of a web scraper or tweet stream or the entirety of Project Gutenberg.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/new-slang"&gt;new-slang&lt;/a&gt; accepts a map of string sequences to string replacements, and transforms strings of text by replacing those string sequences with the, err, uh, replacements. For example, given a map of &lt;code&gt;{ou: &amp;#39;ooo&amp;#39;}&lt;/code&gt; and a string like &lt;code&gt;&amp;#39;you dawg&amp;#39;&lt;/code&gt;, this module would return &lt;code&gt;&amp;#39;yooo dawg&amp;#39;&lt;/code&gt;. If the function was called over and over with a map like &lt;code&gt;{ou: ooui}&lt;/code&gt; and the output of the previous transformation it might produce something similar to &lt;a href="https://github.com/aparrish/linear-lsystem-poetry"&gt;Allison Parrish&lt;/a&gt;&amp;rsquo;s l-system poem generator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/lipogram"&gt;lipogram&lt;/a&gt; demonstrates another constraint of the Oulipo whereby a given text does not contain a letter or set of letters, for example &lt;a href="https://en.wikipedia.org/wiki/A_Void"&gt;A Void by Georges Perec&lt;/a&gt; which does not contain the letter e. One could, perhaps, draw deep meaning from a poem composed out of sentences from Ruby on Rails blog posts that do not contain the letters &lt;code&gt;[&amp;quot;C&amp;quot;, &amp;quot;O&amp;quot;, &amp;quot;M&amp;quot;, &amp;quot;P&amp;quot;, &amp;quot;U&amp;quot;, &amp;quot;T&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;R&amp;quot;]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/each-cons"&gt;each-cons&lt;/a&gt; does not do anything on it&amp;rsquo;s own&amp;hellip;it is just a helper function that exists in Ruby which I wanted to have available in Node.js without requiring all of underscore/lodash/whatever. This function returns consecutive sequences of an array, so given &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt; and a sequence length of &lt;code&gt;3&lt;/code&gt;, it would return &lt;code&gt;[[1, 2, 3], [2, 3, 4], [3, 4, 5]]&lt;/code&gt;. This is particularly handy for constructing &lt;a href="https://www.khanacademy.org/computing/computer-science/informationtheory/moderninfotheory/v/markov_chains"&gt;Markov chains&lt;/a&gt;, and, I am certain, other things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/diacriticize"&gt;diacriticize&lt;/a&gt; basically performs a light &lt;a href="http://www.eeemo.net/"&gt;zalgo&lt;/a&gt; maneuver on the text. It seems to be horridly broken on a lot of platforms, so user beware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/coleww/to-unicode"&gt;to-unicode&lt;/a&gt; transforms some text into unicode equivalents, so you can add circles around all yr letters or switch to a mono-spaced font. Like diacriticize, there are some issues sometimes.  &lt;code&gt;¯\_(ツ)_/¯ unicode  ¯\_(ツ)_/¯&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;These modules don&amp;rsquo;t serve any &amp;ldquo;real&amp;rdquo; purpose, but they are fun to make and usually produce amusing output. Furthermore, in my day to day job I am usually almost always fixing minor bugs or building incremental features on user interfaces to RESTful CRUD APIs in a SAAS fashion, so it is nice to have an excuse to design, implement, benchmark, and optimize a real live algorithm. Art is a wonderful excuse to try out something new, whether it be an algorithm, framework, database, or language. I for one first became truly familiar with and enamored by mongoDB only through writing a video game inside of it.&lt;/p&gt;

&lt;p&gt;Moreover, all of these modules follow what I consider to be best practices for Node.js projects: uses the &lt;a href="https://github.com/feross/standard"&gt;standard&lt;/a&gt; JavaScript style/linter, has tests, has CI setup to run those tests, has documentation that includes a breakdown of the API for the module and some examples, has a small demo app built that demonstrates what the thing does, and, if it makes sense to, it includes a CLI script version of the module. &lt;/p&gt;

&lt;p&gt;Other reasons to use JavaScript to destroy language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dariusk/NaNoGenMo"&gt;NaNoGenMo&lt;/a&gt;: which, put simply, is an annual event wherein you &amp;ldquo;Spend the month of November writing code that generates a novel of 50k+ words.&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tinysubversions.com/2013/09/how-to-make-a-twitter-bot/"&gt;twitter bots&lt;/a&gt;: make a robot spew nonsense for the world to see! (many of the modules mentioned are being used to power the brain of &lt;a href="https://twitter.com/pataphysyllabus"&gt;Hank&lt;/a&gt; (also a lot of taylor swift))&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.somewhatabstract.com/2015/03/02/writing-a-simple-slack-bot-with-Node.js-slack-client/"&gt;slack bots&lt;/a&gt;: make a robot spew nonsense for your co-workers to see! &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tcf.ua.edu/Classes/Jbutler/T340/SurManifesto/ManifestoOfSurrealism.htm"&gt;Poetry&lt;/a&gt;: it is important.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;make a module&lt;/h3&gt;

&lt;p&gt;I have many friends and co-workers who agonize over finding a side project to hack on. They don&amp;rsquo;t want to build something that requires costly infrastructure or depends on network effects, but they also don&amp;rsquo;t want to build another TODO app or blogging client. By expanding your conception of the word &amp;ldquo;product&amp;rdquo; to include works of art and poetry, you&amp;rsquo;ll soon discover an endless supply of things to work on. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pitching Samples Around In Overtone</title>
    <link rel="alternate" href="http://colewillsea.com/blog/overtone-pitching-samples.html"/>
    <id>http://colewillsea.com/blog/overtone-pitching-samples.html</id>
    <published>2015-07-26T13:53:00-07:00</published>
    <updated>2015-08-02T08:16:03-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h1&gt;Pitching Samples Around In Overtone&lt;/h1&gt;

&lt;h2&gt;because sometimes, you&amp;rsquo;re too lazy to sample the entire piano&lt;/h2&gt;

&lt;p&gt;&lt;img alt="otone" src="/blog/images/otone-1e45a68a.gif" /&gt;&lt;/p&gt;

&lt;p&gt;For a while now I have been &lt;a href="http://shreddit-hard-co.re/"&gt;building interfaces&lt;/a&gt; for &lt;a href="http://coleww.github.io/problumz/"&gt;creating music&lt;/a&gt; with &lt;a href="https://www.npmjs.com/package/drone-e-o-synth"&gt;JavaScript and Web Audio&lt;/a&gt;, but apparently Overtone already does everything I could ever possibly think of or want. Awesome, my lifes work for nothing.&lt;/p&gt;

&lt;p&gt;One of the coolest things about Overtone is that it interfaces directly with &lt;a href="https://www.freesound.org/"&gt;Freesound&lt;/a&gt;, a database of free audio samples. That means that you can execute &lt;code&gt;(freesound 123456)&lt;/code&gt; and the audio file at ID 123456 will be automatically downloaded, stored in &lt;code&gt;.overtone/assets&lt;/code&gt;, and played back. I don&amp;rsquo;t know what sample 123456 is, so listener beware&amp;hellip; &lt;/p&gt;

&lt;p&gt;With this newly discovered power I began scouring the Freesound website for vocal samples to lay on top of my music. I found this sample pack called &lt;a href="https://www.freesound.org/people/beskhu/packs/4560/"&gt;Simplesong (MAC) pitched vocal formants&lt;/a&gt; and set out to convert it into a playable instrument along the lines of this &lt;a href="http://blog.josephwilk.net/clojure/creating-instruments-with-overtone.html"&gt;blog post by Joseph Wilk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that I had samples that I liked I just needed to grab their IDs from the website. The aformentioned Joseph Wilk post contains a Ruby script for grabbing ids for a pack, and I also wrote a &lt;a href="https://gist.github.com/coleww/939bc606645c57dd1b29"&gt;node script&lt;/a&gt; for grabbing IDs based on a query. &lt;/p&gt;

&lt;p&gt;Unfortunately, this pack only contained samples of the notes C# A# G and E at various octaves, but I could still play the intermediate pitches by altering the playback rate of the sample. If I wanted to play midi note 34 but I only had a sample for midi note 32 I would just convert both notes to frequencies, divide them, and use the result as the playback value: &lt;code&gt;((freesound 123456) :rate (/ (midi-&amp;gt;hz 34) (midi-&amp;gt;hz 32)))&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;With this simple piece of mathematics in hand, I just needed a play function to do all the equations and make some noise:&lt;/p&gt;
&lt;pre class="highlight clojure"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;ns&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syllable-synth.synth&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;:require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;overtone.live&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:refer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;;; object of objects mapping syllable sound to midi note to a freesound sample
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;

  &lt;/span&gt;&lt;span class="c1"&gt;;; there were many different syllable sounds represented, but for this example we can only make "oooo" sounds
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;:oooo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70529&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70528&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70527&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70526&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70525&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70524&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70523&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70522&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70521&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70520&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70519&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70518&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70517&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;freesound&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;70516&lt;/span&gt;&lt;span class="p"&gt;)}})&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s"&gt;"accepts midi note and syllable to play, uses random if none passed"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;syll&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; if no syllable is passed, pick one at random
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;syllable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;syll&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rand-nth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; grab the notes for which we have a sample 
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;;; that are lower than the note we want to play
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;syllable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; our base-note is the highest note in notes, 
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;;; or 31 if it is lower than 31
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;base-note&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;last&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="c1"&gt;;; in order to pitch the base-note up to our desired note, 
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;;; we convert them both to frequencies and divide
&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;midi-&amp;gt;hz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;midi-&amp;gt;hz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base-note&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;&lt;span class="w"&gt;

    &lt;/span&gt;&lt;span class="c1"&gt;;; grab the sample for the given syllable and base-note,
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;;; and play it back with the rate set 
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;;; to pitch the sample up the desired note
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;syllable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;voices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base-note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;:rate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;play&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the complete code &lt;a href="https://github.com/coleww/my-symphony/blob/master/src/my_symphony/silly-bills.clj"&gt;here&lt;/a&gt; or see it &lt;a href="https://github.com/coleww/my-symphony/blob/master/src/my_symphony/beat.clj"&gt;in action&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
